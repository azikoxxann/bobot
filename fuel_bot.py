import telebot
import os
from dotenv import load_dotenv
from sqlalchemy import create_engine, Column, Integer, String, Float, Date, BigInteger
from sqlalchemy.orm import sessionmaker, declarative_base
import logging
from datetime import datetime

load_dotenv()

TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")

bot = telebot.TeleBot(TOKEN)

logging.basicConfig(filename='fuel_bot.log', level=logging.INFO,
                    format='%(asctime)s - %(levelname)s - %(message)s')

engine = create_engine('sqlite:///trips.db')
Base = declarative_base()

class UserSettings(Base):
    __tablename__ = 'user_settings'
    user_id = Column(BigInteger, primary_key=True)
    base_fuel_consumption = Column(Float)
    extra_fuel_per_ton = Column(Float)

class Trip(Base):
    __tablename__ = 'trips'
    id = Column(Integer, primary_key=True)
    date = Column(Date)
    start_km = Column(Float)
    end_km = Column(Float)
    cargo_weight_kg = Column(Float)
    total_fuel = Column(Float)
    route = Column(String)
    car_number = Column(String)
    user_id = Column(BigInteger)

Base.metadata.create_all(engine)
Session = sessionmaker(bind=engine)

@bot.message_handler(commands=['start'])
def start(message):
    try:
        logging.info(f"User {message.chat.id} started the bot")
        session = Session()
        user_settings = session.query(UserSettings).filter_by(user_id=message.chat.id).first()
        session.close()
        if user_settings:
            show_main_menu(message)
        else:
            bot.send_message(message.chat.id, "–ü–æ—Ö–æ–∂–µ, —á—Ç–æ –≤—ã –ø–µ—Ä–≤—ã–π —Ä–∞–∑ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –±–æ—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –±–∞–∑–æ–≤—ã–π —Ä–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞ (–ª/100 –∫–º).")
            add_cancel_button(message)
            bot.register_next_step_handler(message, get_base_fuel_consumption)
    except Exception as e:
        logging.error(f"Error in start command: {e}", exc_info=True)
        bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

def add_cancel_button(message):
    markup = telebot.types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
    cancel_button = telebot.types.KeyboardButton("–û—Ç–º–µ–Ω–∏—Ç—å")
    markup.add(cancel_button)
    bot.send_message(message.chat.id, "–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ", reply_markup=markup)

@bot.message_handler(func=lambda message: message.text == "–û—Ç–º–µ–Ω–∏—Ç—å")
def cancel_action(message):
    bot.send_message(message.chat.id, "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=telebot.types.ReplyKeyboardRemove())
    show_main_menu(message)

def get_base_fuel_consumption(message):
    if message.text == "–û—Ç–º–µ–Ω–∏—Ç—å":
        cancel_action(message)
        return
    try:
        base_fuel_consumption = float(message.text)
        bot.send_message(message.chat.id, "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ä–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞ –Ω–∞ —Ç–æ–Ω–Ω—É –≥—Ä—É–∑–∞ (–ª/100 –∫–º).")
        add_cancel_button(message)
        bot.register_next_step_handler(message, lambda msg: save_user_settings(msg, base_fuel_consumption))
    except ValueError:
        bot.send_message(message.chat.id, "‚ùå –í–≤–µ–¥–∏ —á–∏—Å–ª–æ! –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")
        add_cancel_button(message)
        bot.register_next_step_handler(message, get_base_fuel_consumption)
    except Exception as e:
        logging.error(f"Error in get_base_fuel_consumption: {e}", exc_info=True)
        bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

def save_user_settings(message, base_fuel_consumption):
    if message.text == "–û—Ç–º–µ–Ω–∏—Ç—å":
        cancel_action(message)
        return
    try:
        extra_fuel_per_ton = float(message.text)
        session = Session()
        user_settings = UserSettings(
            user_id=message.chat.id,
            base_fuel_consumption=base_fuel_consumption,
            extra_fuel_per_ton=extra_fuel_per_ton
        )
        session.add(user_settings)
        session.commit()
        session.close()
        bot.send_message(message.chat.id, "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")
        show_main_menu(message)
    except ValueError:
        bot.send_message(message.chat.id, "‚ùå –í–≤–µ–¥–∏ —á–∏—Å–ª–æ! –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")
        add_cancel_button(message)
        bot.register_next_step_handler(message, lambda msg: save_user_settings(msg, base_fuel_consumption))
    except Exception as e:
        logging.error(f"Error in save_user_settings: {e}", exc_info=True)
        bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

def show_main_menu(message):
    markup = telebot.types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
    new_record_button = telebot.types.KeyboardButton("–ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å")
    view_records_button = telebot.types.KeyboardButton("–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–ø–∏—Å–∏")
    delete_records_button = telebot.types.KeyboardButton("–£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å–∏")
    settings_button = telebot.types.KeyboardButton("–ù–∞—Å—Ç—Ä–æ–π–∫–∏")
    markup.add(new_record_button, view_records_button, delete_records_button, settings_button)
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)

@bot.message_handler(func=lambda message: message.text in ["–ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å", "–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–ø–∏—Å–∏", "–£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å–∏", "–ù–∞—Å—Ç—Ä–æ–π–∫–∏"])
def handle_menu(message):
    try:
        if message.text == "–ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å":
            bot.send_message(message.chat.id, "–í–≤–µ–¥–∏ –ø–æ–∫–∞–∑–∞–Ω–∏–µ —Å–ø–∏–¥–æ–º–µ—Ç—Ä–∞ –ø—Ä–∏ –≤—ã–µ–∑–¥–µ (–∫–º).")
            add_cancel_button(message)
            bot.register_next_step_handler(message, get_start_km)
        elif message.text == "–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–ø–∏—Å–∏":
            show_trips(message)
        elif message.text == "–£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å–∏":
            delete_trips(message)
        elif message.text == "–ù–∞—Å—Ç—Ä–æ–π–∫–∏":
            update_settings(message)
    except Exception as e:
        logging.error(f"Error in handle_menu: {e}", exc_info=True)
        bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

def get_start_km(message):
    if message.text == "–û—Ç–º–µ–Ω–∏—Ç—å":
        cancel_action(message)
        return
    try:
        start_km = float(message.text)
        bot.send_message(message.chat.id, "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –ø–æ–∫–∞–∑–∞–Ω–∏–µ —Å–ø–∏–¥–æ–º–µ—Ç—Ä–∞ –ø—Ä–∏ –ø—Ä–∏–µ–∑–¥–µ (–∫–º).")
        add_cancel_button(message)
        bot.register_next_step_handler(message, lambda msg: get_end_km(msg, start_km))
    except ValueError:
        bot.send_message(message.chat.id, "‚ùå –í–≤–µ–¥–∏ —á–∏—Å–ª–æ! –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")
        add_cancel_button(message)
        bot.register_next_step_handler(message, get_start_km)
    except Exception as e:
        logging.error(f"Error in get_start_km: {e}", exc_info=True)
        bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

def get_end_km(message, start_km):
    if message.text == "–û—Ç–º–µ–Ω–∏—Ç—å":
        cancel_action(message)
        return
    try:
        end_km = float(message.text)
        if end_km < start_km:
            bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞! –ü—Ä–∏–µ–∑–¥ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ –≤—ã–µ–∑–¥–∞.")
            add_cancel_button(message)
            bot.register_next_step_handler(message, get_start_km)
            return
        bot.send_message(message.chat.id, "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –º–∞—Å—Å—É –≥—Ä—É–∑–∞ (–∫–≥).")
        add_cancel_button(message)
        bot.register_next_step_handler(message, lambda msg: calculate_fuel(msg, start_km, end_km))
    except ValueError:
        bot.send_message(message.chat.id, "‚ùå –í–≤–µ–¥–∏ —á–∏—Å–ª–æ! –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")
        add_cancel_button(message)
        bot.register_next_step_handler(message, lambda msg: get_end_km(msg, start_km))
    except Exception as e:
        logging.error(f"Error in get_end_km: {e}", exc_info=True)
        bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

def calculate_fuel(message, start_km, end_km):
    if message.text == "–û—Ç–º–µ–Ω–∏—Ç—å":
        cancel_action(message)
        return
    try:
        cargo_weight_kg = float(message.text)
        session = Session()
        user_settings = session.query(UserSettings).filter_by(user_id=message.chat.id).first()
        if not user_settings:
            bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
            return

        base_fuel_consumption = user_settings.base_fuel_consumption
        extra_fuel_per_ton = user_settings.extra_fuel_per_ton

        distance = end_km - start_km
        base_fuel = (distance / 100) * base_fuel_consumption
        extra_fuel = (distance / 100) * (cargo_weight_kg / 1000) * extra_fuel_per_ton
        total_fuel = base_fuel + extra_fuel

        trip = Trip(
            date=datetime.now().date(),
            start_km=start_km,
            end_km=end_km,
            cargo_weight_kg=cargo_weight_kg,
            total_fuel=total_fuel,
            route="–ù–µ —É–∫–∞–∑–∞–Ω",
            car_number="–ù–µ —É–∫–∞–∑–∞–Ω",
            user_id=message.chat.id
        )
        session.add(trip)
        session.commit()
        session.close()

        bot.send_message(message.chat.id, f"üöó –ü—Ä–æ–π–¥–µ–Ω–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {distance:.2f} –∫–º\n"
                                          f"üì¶ –ì—Ä—É–∑: {cargo_weight_kg / 1000:.2f} —Ç–æ–Ω–Ω\n"
                                          f"‚õΩ –ü—Ä–∏–º–µ—Ä–Ω—ã–π —Ä–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞: {total_fuel:.2f} –ª–∏—Ç—Ä–æ–≤.\n"
                                          f"‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")
        show_main_menu(message)
    except ValueError:
        bot.send_message(message.chat.id, "‚ùå –í–≤–µ–¥–∏ —á–∏—Å–ª–æ! –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")
        add_cancel_button(message)
        bot.register_next_step_handler(message, lambda msg: calculate_fuel(msg, start_km, end_km))
    except Exception as e:
        logging.error(f"Error in calculate_fuel: {e}", exc_info=True)
        bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

def show_trips(message):
    try:
        session = Session()
        trips = session.query(Trip).filter_by(user_id=message.chat.id).all()
        session.close()

        if trips:
            response = "–í–∞—à–∏ –ø–æ–µ–∑–¥–∫–∏:\n"
            for trip in trips:
                response += f"–î–∞—Ç–∞: {trip.date}\n"
                response += f"–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {trip.end_km - trip.start_km:.2f} –∫–º\n"
                response += f"–ì—Ä—É–∑: {trip.cargo_weight_kg / 1000:.2f} —Ç–æ–Ω–Ω\n"
                response += f"–†–∞—Å—Ö–æ–¥: {trip.total_fuel:.2f} –ª\n\n"
            bot.send_message(message.chat.id, response)
        else:
            bot.send_message(message.chat.id, "–ù–µ—Ç –∑–∞–ø–∏—Å–∞–Ω–Ω—ã—Ö –ø–æ–µ–∑–¥–æ–∫.")
        show_main_menu(message)
    except Exception as e:
        logging.error(f"Error in show_trips: {e}", exc_info=True)
        bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

def delete_trips(message):
    try:
        session = Session()
        trips = session.query(Trip).filter_by(user_id=message.chat.id).all()
        if trips:
            session.query(Trip).filter_by(user_id=message.chat.id).delete()
            session.commit()
            bot.send_message(message.chat.id, "–í—Å–µ –≤–∞—à–∏ –∑–∞–ø–∏—Å–∏ –æ –ø–æ–µ–∑–¥–∫–∞—Ö –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã.")
        else:
            bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
        session.close()
        show_main_menu(message)
    except Exception as e:
        logging.error(f"Error in delete_trips: {e}", exc_info=True)
        bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

def update_settings(message):
    try:
        session = Session()
        user_settings = session.query(UserSettings).filter_by(user_id=message.chat.id).first()
        session.close()
        if user_settings:
            bot.send_message(message.chat.id, f"–í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–∑–æ–≤—ã–π —Ä–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞: {user_settings.base_fuel_consumption} –ª/100 –∫–º\n"
                                              f"–í–∞—à —Ç–µ–∫—É—â–∏–π –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ä–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞ –Ω–∞ —Ç–æ–Ω–Ω—É –≥—Ä—É–∑–∞: {user_settings.extra_fuel_per_ton} –ª/100 –∫–º\n"
                                              f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –±–∞–∑–æ–≤—ã–π —Ä–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞ (–ª/100 –∫–º):")
            add_cancel_button(message)
            bot.register_next_step_handler(message, get_new_base_fuel_consumption)
        else:
            bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
    except Exception as e:
        logging.error(f"Error in update_settings: {e}", exc_info=True)
        bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

def get_new_base_fuel_consumption(message):
    if message.text == "–û—Ç–º–µ–Ω–∏—Ç—å":
        cancel_action(message)
        return
    try:
        base_fuel_consumption = float(message.text)
        bot.send_message(message.chat.id, "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ä–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞ –Ω–∞ —Ç–æ–Ω–Ω—É –≥—Ä—É–∑–∞ (–ª/100 –∫–º).")
        add_cancel_button(message)
        bot.register_next_step_handler(message, lambda msg: save_new_user_settings(msg, base_fuel_consumption))
    except ValueError:
        bot.send_message(message.chat.id, "‚ùå –í–≤–µ–¥–∏ —á–∏—Å–ª–æ! –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")
        add_cancel_button(message)
        bot.register_next_step_handler(message, get_new_base_fuel_consumption)
    except Exception as e:
        logging.error(f"Error in get_new_base_fuel_consumption: {e}", exc_info=True)
        bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

def save_new_user_settings(message, base_fuel_consumption):
    if message.text == "–û—Ç–º–µ–Ω–∏—Ç—å":
        cancel_action(message)
        return
    try:
        extra_fuel_per_ton = float(message.text)
        session = Session()
        user_settings = session.query(UserSettings).filter_by(user_id=message.chat.id).first()
        user_settings.base_fuel_consumption = base_fuel_consumption
        user_settings.extra_fuel_per_ton = extra_fuel_per_ton
        session.commit()
        session.close()
        bot.send_message(message.chat.id, "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã.")
        show_main_menu(message)
    except ValueError:
        bot.send_message(message.chat.id, "‚ùå –í–≤–µ–¥–∏ —á–∏—Å–ª–æ! –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")
        add_cancel_button(message)
        bot.register_next_step_handler(message, lambda msg: save_new_user_settings(msg, base_fuel_consumption))
    except Exception as e:
        logging.error(f"Error in save_new_user_settings: {e}", exc_info=True)
        bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

bot.polling(none_stop=True)
